package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.*;

public class BotConfig extends TelegramLongPollingBot {
    final private String BOT_TOKEN = "BOT_TOKEN";
    final private String BOT_NAME = "BOT_NAME";
    private final Map<Long, List<String>> userOptions = new HashMap<>();
    private final Map<Long, String> userStatus = new HashMap<>();
    public BotConfig() {
        super("BOT_TOKEN");
    }
    @Override

    public void onUpdateReceived(Update update) {
        System.out.println("Update received: " + update);
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                String userMessage = update.getMessage().getText();
                System.out.println("Received message: " + userMessage);
                Message inMess = update.getMessage();
                Long userId = inMess.getChatId();
                ReplyKeyboardMarkup keyboardMarkup;

                //–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                String response = parseMessage(userId, inMess.getText());
                //–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ SendMessage - –Ω–∞—à –±—É–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                String status = userStatus.getOrDefault(userId, "none");
                if (status.equals("add") || status.equals("remove")) {
                    keyboardMarkup = initStopKeyboard();
                    System.out.println(status);
                }else keyboardMarkup = initStartKeyboard();
                System.out.println(status);
                if (keyboardMarkup != null) {
                    sendMessageWithKeyboard(response, keyboardMarkup, userId);
                } else {
                    sendMessageWithoutKeyboard(response, userId);
                }
                System.out.println(status);

                //–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }


    }

    public String parseMessage(Long chatId, String textMsg) throws IOException, URISyntaxException {
        String response = " ";
        switch (textMsg.toLowerCase(Locale.ROOT)) {
            case "/start", "–ø—Ä–∏–≤–µ—Ç", "/help", "–ø–æ–º–æ—â—å.":
                response = """
                        –ü—Ä–∏–≤–µ—Ç! üé° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã¬ª!
                        –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

                        üé° –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                        üîπ /spin ‚Äî –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
                        üîπ /list ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –∫–æ–ª–µ—Å–µ.
                        üîπ /reset ‚Äî –°–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

                        ‚ûï –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
                        üîπ /addoption —Ç–µ–∫—Å—Ç ‚Äî –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç.
                        üîπ /removeoption —Ç–µ–∫—Å—Ç ‚Äî –£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç.

                        ‚Ñπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                        üîπ /help ‚Äî –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.

                        –ö—Ä—É—Ç–∏ –∫–æ–ª–µ—Å–æ –∏ –ø–æ–ª—É—á–∞–π —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üé∞
                        """;
                break;
            case "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å.":
                response = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n–ê–π–¥–∏—à–∫–∞ —á–∞—Ç–∞: " + chatId;
                break;

            case "/spin", "–ø—Ä–æ–∫—Ä—É—Ç–∏", "–∫—Ä—É—Ç–∏!":
                List<String> options = userOptions.getOrDefault(chatId, new ArrayList<>());
                if (options.isEmpty()) {
                    response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤! –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é /–¥–æ–±–∞–≤–∏—Ç—å.";
                } else {
                    String randomOption = options.get(new Random().nextInt(options.size()));
                    response = "–í—ã–ø–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç: " + randomOption;
                }
                // user.getRandom()
                break;
            case "/list", "—Å–ø–∏—Å–æ–∫", "—Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.":
                options = userOptions.getOrDefault(chatId, new ArrayList<>());
                response =  (options.isEmpty() ? "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç." : "–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã: " + options);
                //  user.getList();
                break;
            case "/reset", "–æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫":
                userOptions.remove(chatId);
                response = "–í–∞—à —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!";
                // —Ç—É—Ç –±—É–¥–µ—Ç –ø–æ–∏–¥–µ–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø–æ —Ç–∏–ø—É,
                // —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Ç–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å, –Ω–æ –≤–ø—Ä–∏–Ω—Ü–∏–ø–µ, –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥
                // user.reset();
                break;
            case "/addoption", "–¥–æ–±–∞–≤–∏—Ç—å.":
                response = "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º!"+
                        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"/stop\".";;
                userStatus.put(chatId, "add");
                // —Ç—É—Ç –±—É–¥–µ—Ç –ø–æ–∏–¥–µ–∏ —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –Ω–∞ —Ç—Ä—É —Ñ–æ–ª—Å
                // –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ç—Ä—É —Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ —Ç–µ—Ö –ø–æ—Ä
                // –ø–æ–∫–∞ –Ω–µ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Ñ–æ–ª—Å.
                break;
            case "/removeoption", "—É–¥–∞–ª–∏—Ç—å.":
                options = userOptions.getOrDefault(chatId, new ArrayList<>());
                response = "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n" + (options.isEmpty() ? "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç." : "–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã: " + options) +"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"/stop\".";;;
                userStatus.put(chatId, "remove");
                // —Ç—É—Ç –±—É–¥–µ—Ç –ø–æ–∏–¥–µ–∏ —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –Ω–∞ —Ç—Ä—É —Ñ–æ–ª—Å
                // –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ç—Ä—É —Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ —Ç–µ—Ö –ø–æ—Ä
                // –ø–æ–∫–∞ –Ω–µ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Ñ–æ–ª—Å.
                break;
            case "/stop", "stop":
                response = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É!";
                userStatus.put(chatId, "none");
            default:
                String status = userStatus.getOrDefault(chatId, "none");
                if (status.equals("add")) {
                    userOptions.computeIfAbsent(chatId, k -> new ArrayList<>()).add(textMsg);
                    response = "–î–æ–±–∞–≤–ª–µ–Ω–æ: " + textMsg;
                } else if (status.equals("remove")) {
                    List<String> list = userOptions.get(chatId);
                    if (list != null && list.remove(textMsg)) {
                        response = "–£–¥–∞–ª–µ–Ω–æ: " + textMsg;
                    }
                }
                else
                    response = "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.";
        }
        return response;
    }

    @Override
    public String getBotUsername() {
        return "WheelBot";
    }

    ReplyKeyboardMarkup  initStartKeyboard() {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);
        ArrayList<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–ö—Ä—É—Ç–∏!"));
        row1.add(new KeyboardButton("–°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å."));
        row2.add(new KeyboardButton("–ü–æ–º–æ—â—å."));
        KeyboardRow row3 = new KeyboardRow();
        row2.add(new KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å."));
        row2.add(new KeyboardButton("–£–¥–∞–ª–∏—Ç—å."));
        keyboardRows.add(row1);
        keyboardRows.add(row2);
        keyboardRows.add(row3);
        replyKeyboardMarkup.setKeyboard(keyboardRows);
        return replyKeyboardMarkup;

    }
    ReplyKeyboardMarkup initStopKeyboard() {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("/stop"));

        replyKeyboardMarkup.setKeyboard(Collections.singletonList(row));
        return replyKeyboardMarkup;
    }
    void sendMessageWithKeyboard(String text, ReplyKeyboardMarkup keyboard, Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setReplyMarkup(keyboard);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    void sendMessageWithoutKeyboard(String text, Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}